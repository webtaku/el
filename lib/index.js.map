{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAwCA,SAAS,EAAE,CACT,WAAc,KAAU,EACxB,GAAG,QAAuD;IAE1D,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACvC,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;IAC9B,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAEvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QACzC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAc,CAAC;QACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,KAAK;YAAE,SAAS;QACrB,IAAI,IAAI,KAAK,GAAG;YAAE,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC;aAC3B,IAAI,IAAI,KAAK,GAAG;YAAE,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;QAC7B,IAAI,KAAK,YAAY,WAAW;YAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACnD,IAAI,OAAO,KAAK,KAAK,QAAQ;YAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;aAC9E,CAAC;YACJ,MAAM,KAAK,GAAG,KAAwB,CAAC;YACvC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBACjD,IAAI,GAAG,KAAK,OAAO,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;oBACjD,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACjC,CAAC;qBAAM,IAAI,GAAG,KAAK,OAAO,EAAE,CAAC;oBAC3B,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,GAAI,KAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtD,CAAC;qBAAM,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;oBACpB,EAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAC3B,CAAC;qBAAM,CAAC;oBACN,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtC,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,EAA0B,CAAC;AACpC,CAAC;AAED,OAAO,EAAE,EAAE,EAAE,CAAC","sourcesContent":["type CustomTag = `${string}-${string}`;\n\ntype Tag = '' | keyof HTMLElementTagNameMap | CustomTag;\n\ntype Selector =\n  | Tag\n  | `${Tag}#${string}`\n  | `${Tag}.${string}`\n  | `${Tag}#${string}.${string}`;\n\ntype ElementByTag<T extends Tag | string> = (\n  T extends '' ? HTMLDivElement\n  : (\n    T extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[T]\n    : HTMLElement\n  )\n);\n\ntype ElementBySelector<S extends Selector> = (\n  S extends '' ? HTMLDivElement\n  : (\n    S extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[S]\n    : (\n      S extends `${infer T}#${string}` ? ElementByTag<T>\n      : (\n        S extends `${infer T}.${string}` ? ElementByTag<T>\n        : HTMLElement\n      )\n    )\n  )\n);\n\ntype ElementProps<\n  S extends Selector,\n  A extends Record<string, unknown> = {}\n> =\n  & Partial<Omit<ElementBySelector<S>, 'style'>>\n  & { style?: Partial<CSSStyleDeclaration> }\n  & A;\n\nfunction el<S extends Selector, A extends Record<string, unknown> = {}>(\n  selector: S = 'div' as S,\n  ...children: (HTMLElement | string | ElementProps<S, A>)[]\n): ElementBySelector<S> {\n  const parts = selector.split(/([#.])/);\n  const tag = parts[0] || 'div';\n  const el = document.createElement(tag);\n\n  for (let i = 1; i < parts.length; i += 2) {\n    const type = parts[i] as '#' | '.';\n    const value = parts[i + 1];\n    if (!value) continue;\n    if (type === '#') el.id = value;\n    else if (type === '.') el.classList.add(value);\n  }\n\n  for (const child of children) {\n    if (child instanceof HTMLElement) el.appendChild(child);\n    else if (typeof child === 'string') el.appendChild(document.createTextNode(child));\n    else {\n      const attrs = child as ElementProps<S>;\n      for (const [key, value] of Object.entries(attrs)) {\n        if (key === 'style' && typeof value === 'object') {\n          Object.assign(el.style, value);\n        } else if (key === 'class') {\n          el.classList.add(...(value as string).split(/\\s+/));\n        } else if (key in el) {\n          (el as any)[key] = value;\n        } else {\n          el.setAttribute(key, String(value));\n        }\n      }\n    }\n  }\n\n  return el as ElementBySelector<S>;\n}\n\nexport { el };\n"]}