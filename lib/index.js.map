{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["type CustomTag = `${string}-${string}`;\ntype Tag = '' | keyof HTMLElementTagNameMap | CustomTag;\n\ntype Selector =\n  | Tag\n  | `${Tag}#${string}`\n  | `${Tag}.${string}`\n  | `${Tag}#${string}.${string}`;\n\ntype ElementByTag<T extends Tag | string> = (\n  T extends '' ? HTMLDivElement\n  : (\n    T extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[T]\n    : HTMLElement\n  )\n);\n\ntype ElementBySelector<S extends Selector> = (\n  S extends '' ? HTMLDivElement\n  : (\n    S extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[S]\n    : (\n      S extends `${infer T}#${string}` ? ElementByTag<T>\n      : (\n        S extends `${infer T}.${string}` ? ElementByTag<T>\n        : HTMLElement\n      )\n    )\n  )\n);\n\n// Data / ARIA attribute support\ntype DataAttributes = { [K in `data-${string}`]?: string | number | boolean | null | undefined };\ntype AriaAttributes = { [K in `aria-${string}`]?: string | number | boolean | null | undefined };\n\ntype ElementProps<S extends Selector> =\n  & Partial<Omit<ElementBySelector<S>, 'style'>>\n  & {\n    // Allow both CSS object and raw cssText string\n    style?: Partial<CSSStyleDeclaration> | string;\n    class?: string;\n    dataset?: Record<string, string | number | boolean | null | undefined>;\n    role?: string;\n  }\n  & DataAttributes\n  & AriaAttributes;\n\nfunction el<S extends Selector>(\n  selector: S = '' as S,\n  ...args: (HTMLElement | string | ElementProps<S> | null | undefined)[]\n): ElementBySelector<S> {\n  const parts = selector.split(/([#.])/);\n  const tag = parts[0] || 'div';\n  const el = document.createElement(tag);\n\n  // id/class from selector\n  for (let i = 1; i < parts.length; i += 2) {\n    const type = parts[i] as '#' | '.';\n    const value = parts[i + 1];\n    if (!value) continue;\n    if (type === '#') el.id = value;\n    else if (type === '.') el.classList.add(value);\n  }\n\n  const toCamel = (s: string) => s.replace(/-([a-z0-9])/g, (_, c) => c.toUpperCase());\n\n  const fragment = document.createDocumentFragment();\n\n  for (const arg of args) {\n    if (arg instanceof HTMLElement) {\n      fragment.appendChild(arg);\n      continue;\n    }\n\n    if (typeof arg === 'string') {\n      const lines = arg.split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (i > 0) fragment.appendChild(document.createElement('br'));\n        const line = lines[i];\n        if (line) fragment.appendChild(document.createTextNode(line));\n      }\n      continue;\n    }\n\n    if (!arg) continue;\n\n    const attrs = arg as ElementProps<S>;\n    for (const key in attrs) {\n      if (!Object.prototype.hasOwnProperty.call(attrs, key)) continue;\n      const value = (attrs as any)[key];\n      if (value == null) continue;\n\n      // style: object or string\n      if (key === 'style') {\n        if (typeof value === 'string') {\n          const css = value.trim();\n          if (css) {\n            // add a semicolon if needed when appending\n            const hasExisting = (el as HTMLElement).style.cssText.trim().length > 0;\n            if (hasExisting && !css.startsWith(';')) {\n              (el as HTMLElement).style.cssText += ';';\n            }\n            (el as HTMLElement).style.cssText += css;\n          }\n        } else if (typeof value === 'object') {\n          Object.assign((el as HTMLElement).style, value);\n        }\n        continue;\n      }\n\n      // dataset object\n      if (key === 'dataset' && typeof value === 'object') {\n        for (const dk in value) {\n          const dv = (value as any)[dk];\n          if (dv == null) continue;\n          (el as HTMLElement).dataset[toCamel(dk)] = String(dv);\n        }\n        continue;\n      }\n\n      if (key === 'id') {\n        el.id = value as any;\n        continue;\n      }\n\n      // class / className\n      if (key === 'class' || key === 'className') {\n        const classNames = String(value).split(/\\s+/);\n        for (const cn of classNames) if (cn) el.classList.add(cn);\n        continue;\n      }\n\n      // direct data-* mapping (attribute + dataset)\n      if (key.startsWith('data-')) {\n        const dsKey = toCamel(key.slice(5));\n        (el as HTMLElement).dataset[dsKey] = String(value);\n        el.setAttribute(key, String(value));\n        continue;\n      }\n\n      // aria-* attributes\n      if (key.startsWith('aria-')) {\n        el.setAttribute(key, String(value));\n        continue;\n      }\n\n      // If the property exists on the element, set it directly\n      if (key in el) {\n        (el as any)[key] = value;\n        continue;\n      }\n\n      // Fallback: set as an attribute\n      el.setAttribute(key, String(value));\n    }\n  }\n\n  el.appendChild(fragment);\n  return el as ElementBySelector<S>;\n}\n\nexport { el };\n"]}